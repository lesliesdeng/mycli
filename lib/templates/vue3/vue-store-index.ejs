import { Module } from 'vuex'
import { <%= data.parentUp %><%= data.nameUp %>State } from './types'
import { IPagePayload } from '@/store/main/system/types'
import { IRootState } from '@/store/types'

import {
  getPageList,
  deletePageData,
  newPageData,
  editPageData
} from '@/service/main/system/system'

const <%= data.parent %><%= data.nameUp %>Module: Module<<%= data.parentUp %><%= data.nameUp %>State, IRootState> = {
  namespaced: true,
  state() {
    return {
      <%= data.parent %><%= data.nameUp %>TotalCount: 0,
      <%= data.parent %><%= data.nameUp %>List: [],
      <%= data.parent %><%= data.nameUp %>AutoList: [],
      <%= data.parent %><%= data.nameUp %>QueryInfo: null
    }
  },
  mutations: {
    change<%= data.parentUp %><%= data.nameUp %>TotalCount(state, totalCount: number) {
      state.<%= data.parent %><%= data.nameUp %>TotalCount = totalCount
    },
    change<%= data.parentUp %><%= data.nameUp %>List(state, userList: any) {
      state.<%= data.parent %><%= data.nameUp %>List = userList
    },
    change<%= data.parentUp %><%= data.nameUp %>AutoList(state, autoList: any) {
      state.<%= data.parent %><%= data.nameUp %>AutoList = autoList
    },
    change<%= data.parentUp %><%= data.nameUp %>QueryInfo(state, queryInfo: any) {
      state.<%= data.parent %><%= data.nameUp %>QueryInfo = queryInfo
    }
  },
  getters: {
    pageListData(state) {
      return (pageName: string) => {
        const listData: any[] = (state as any)[`${pageName}List`] ?? []
        return listData
      }
    },
    pageListDataCount(state) {
      return (pageName: string) => {
        const listCount = (state as any)[`${pageName}TotalCount`] ?? 0
        return listCount
      }
    },
    autoListData(state) {
      return (pageName: string) => {
        const autoList = (state as any)[`${pageName}AutoList`] ?? []
        return autoList
      }
    }
  },
  actions: {
    async getPageListDataAction({ commit }, payload: IPagePayload) {
      const pageUrl = `/users/list`
      if (pageUrl.length === 0) return
      const { total, list } = await getPageList(pageUrl, payload.queryInfo)
      list && commit('change<%= data.parentUp %><%= data.nameUp %>TotalCount', total)
      list && commit('change<%= data.parentUp %><%= data.nameUp %>List', list)
      payload && commit('change<%= data.parentUp %><%= data.nameUp %>QueryInfo', payload.queryInfo)
    },

    async deletePageDataAction({ dispatch, state }, payload: IPagePayload) {
      const deleteId = payload.id
      if (!deleteId) return
      const pageUrl = `/users/${deleteId}`
      await deletePageData(pageUrl)
      dispatch('getPageListDataAction', {
        pageName: payload.pageName,
        queryInfo: { ...state.<%= data.parent %><%= data.nameUp %>QueryInfo }
      })
    },

    async newPageDataAction({ dispatch, state }, payload: IPagePayload) {
      const pageUrl = `/users`
      const pageData = payload.queryInfo
      await newPageData(pageUrl, pageData)

      dispatch('getPageListDataAction', {
        pageName: payload.pageName,
        queryInfo: { ...state.<%= data.parent %><%= data.nameUp %>QueryInfo, page: 1 }
      })
    },

    async editPageDataAction({ dispatch, state }, payload: IPagePayload) {
      if (!payload.id) return
      const pageUrl = `/users/${payload.id}`
      const pageData = payload.queryInfo
      await editPageData(pageUrl, pageData)

      dispatch('getPageListDataAction', {
        pageName: payload.pageName,
        queryInfo: { ...state.<%= data.parent %><%= data.nameUp %>QueryInfo }
      })
    },

    async getPageListAutoDataAction({ commit }, payload: IPagePayload) {
      const pageUrl = `/users/list`
      const { list } = await getPageList(pageUrl, payload.queryInfo)
      list && commit('change<%= data.parentUp %><%= data.nameUp %>AutoList', list)
    }
  }
}

export default <%= data.parent %><%= data.nameUp %>Module